{"version":3,"sources":["components/Card.js","utils/array-helpers.js","components/Board.js","components/SpyMaster.js","App.js","serviceWorker.js","index.js"],"names":["Card","color","this","props","card","document","selection","empty","window","getSelection","removeAllRanges","cardId","cardIsExpanded","contextMenuExpanded","onContextMenu","className","onDoubleClick","onClick","src","setColor","React","Component","randomise","arr","sort","Math","random","Board","arguments","state","cards","randomiseCards","defaultCard","Array","map","_","i","slice","resetCards","setState","e","preventDefault","target","parentElement","filter","c","forEach","resetAll","key","toggleExpand","to","floor","newGames","SpyMaster","spyCardId","spyCardIdToDisplay","cardNotFound","showInput","fetch","results","json","match","params","find","id","history","push","value","href","toggleInput","onSubmit","findCard","onChange","changeSpyCardInput","startingColor","cells","index","App","exact","path","component","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.89b8380d.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\n\nclass Card extends React.Component {\n  setColor(color) {\n    this.props.card.color = color;\n  }\n\n  onDoubleClick() {\n    if(document.selection && document.selection.empty) {\n      document.selection.empty();\n    } else if (window.getSelection) {\n      const sel = window.getSelection();\n      sel.removeAllRanges();\n    }\n    this.props.card.color = '';\n  }\n\n  render() {\n    const { cardId, cardIsExpanded, contextMenuExpanded } = this.props.card;\n    return (\n      <div onContextMenu={this.props.onContextMenu} className=\"card\">\n        {this.props.card.color ? <div className={`overlay ${this.props.card.color}`} onDoubleClick={() => this.onDoubleClick()}></div> : null}\n        <img\n          onClick={this.props.onClick}\n          src={`/codenamdes-pictures/cards/card-${cardId}.jpg`}\n          className={`card-img ${cardIsExpanded ? 'expanded' : ''}`}\n        />\n        {contextMenuExpanded ?\n          <div className=\"context-menu\">\n            <p className=\"menu-action red\" onClick={() => this.setColor('red')}>Red</p>\n            <p className=\"menu-action blue\" onClick={() => this.setColor('blue')}>Blue</p>\n            <p className=\"menu-action neutral\" onClick={() => this.setColor('neutral')}>Neutral</p>\n            <p className=\"menu-action black\" onClick={() => this.setColor('black')}>Game Over</p>\n          </div> : null}\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","function randomise(arr) {\n  return arr.sort(() => 0.5 - Math.random());\n}\n\nexport default randomise\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Card from './Card';\nimport randomise from '../utils/array-helpers';\nimport './Board.css';\n\nclass Board extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      cards: this.randomiseCards()\n    }\n  }\n\n  randomiseCards() {\n    const defaultCard = { cardIsExpanded: false, contextMenuExpanded: false, color: '' };\n    return randomise([...Array(100)].map((_, i) => ({ cardId: i, ...defaultCard }))).slice(0, 20);\n  }\n\n  toggleExpand(card) {\n    this.resetCards(card);\n    card.cardIsExpanded = !card.cardIsExpanded;\n    this.setState({ cards: this.state.cards });\n  }\n\n  onContextMenu(card, e) {\n    e.preventDefault();\n    this.resetCards();\n    card.contextMenuExpanded = !card.contextMenuExpanded;\n    this.setState({ cards: this.state.cards });\n  }\n\n  resetAll(e) {\n    if (e.target.parentElement.className === 'card' || e.target.parentElement.className === 'card') {\n      return;\n    }\n    this.resetCards();\n    this.setState({ cards: this.state.cards });\n  }\n\n  resetCards(card = {}) {\n    this.state.cards.filter(c => c.cardId !== card.cardId).forEach(c => { c.cardIsExpanded = false; c.contextMenuExpanded= false });\n  }\n\n  newGames() {\n    this.state.cards = this.randomiseCards();\n  }\n\n  render() {\n    return (\n      <div className=\"container\" onClick={(e) => this.resetAll(e)}>\n        <div className=\"grid\">\n          {this.state.cards.map(card => (\n            <Card\n              key={card.cardId}\n              card={card}\n              onClick={() => this.toggleExpand(card)}\n              onContextMenu={(e) => this.onContextMenu(card, e)}\n            />\n          ))}\n        </div>\n        <div className=\"btn-wrapper\">\n          <div>\n            <Link className=\"btn blue\" target='_blank' to={`/spy-master/${Math.floor(Math.random() * 50)}`}>Spy Master</Link>\n            <button className=\"btn\" onClick={() => this.newGames()}>New Game</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React from 'react';\nimport './SpyMaster.css';\n\nclass SpyMaster extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      card: null,\n      spyCardId: '',\n      spyCardIdToDisplay: '',\n      cardNotFound: false,\n      showInput: false,\n      cards: []\n    }\n  }\n\n  async componentDidMount() {\n    const results = await fetch('/codenamdes-pictures/spy-cards.json');\n    const cards = await results.json();\n    const spyCardId = this.props.match.params.spyCardId;\n    const card = cards.find(({ id }) => id === spyCardId);\n    this.setState({\n      card,\n      cards,\n      spyCardId,\n      cardNotFound: true,\n      spyCardIdToDisplay: spyCardId,\n    });\n  }\n\n  toggleInput(e) {\n    e.preventDefault();\n    this.setState({ showInput: !this.state.showInput });\n  }\n\n  findCard(e) {\n    e.preventDefault();\n    this.setState({ spyCardIdToDisplay: this.state.spyCardId });\n    this.props.history.push(this.state.spyCardId);\n    const card = this.state.cards.find(({ id }) => id === this.state.spyCardId);\n    this.setState({ card, showInput: false });\n    card && this.setState({ cardNotFound: true });\n  }\n\n  changeSpyCardInput({ target }) {\n    this.setState({ spyCardId: target.value });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"find-card-wrapper\">\n          <p>Looking for a card? Click <a href=\"#\" onClick={(e) => this.toggleInput(e)}>here</a> to find a specific card</p>\n          {this.state.showInput ?\n            <form onSubmit={(e) => this.findCard(e)}>\n              <input className=\"input\" value={this.state.spyCardId} onChange={(e) => this.changeSpyCardInput(e)} />\n              <button className=\"btn blue\">Search</button>\n            </form>\n            : null}\n        </div>\n        {this.state.card ?\n          <div className=\"container spy-master\">\n            <h1 className=\"title\">Spy card: {this.state.spyCardIdToDisplay}</h1>\n            <div className=\"card-container\">\n              <div className={`starting-color ${this.state.card.startingColor}`}></div>\n              <div className=\"spy-grid\">\n                {this.state.card.cells.map(({ color }, index) => (\n                  <div className={`card ${color}`} key={index}></div>\n                ))}\n              </div>\n              <div className={`starting-color ${this.state.card.startingColor}`}></div>\n            </div>\n          </div> : null}\n        <div className=\"container spy-master\">\n          {this.state.cardNotFound ? <h1 className=\"title\">Spy card \"{this.state.spyCardIdToDisplay}\" not found</h1> : null}\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default SpyMaster;\n","import React from 'react';\nimport Board from './components/Board';\nimport SpyMaster from './components/SpyMaster';\nimport { HashRouter, Route } from 'react-router-dom';\nimport './App.css';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Route exact path=\"/\" component={Board} />\n      <Route exact path=\"/spy-master/:spyCardId\" component={SpyMaster} />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}